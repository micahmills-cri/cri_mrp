generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String          @id @default(cuid())
  name        String          @unique
  users       User[]
  workCenters WorkCenter[]
  notes       WorkOrderNote[]
}

model User {
  id              String                @id @default(cuid())
  email           String                @unique
  passwordHash    String
  role            Role                  @default(OPERATOR)
  departmentId    String?
  hourlyRate      Decimal?              @db.Decimal(10, 2)
  shiftSchedule   Json?
  createdAt       DateTime              @default(now())
  auditLogs       AuditLog[]
  department      Department?           @relation(fields: [departmentId], references: [id])
  woStageLogs     WOStageLog[]
  notes           WorkOrderNote[]
  attachments     WorkOrderAttachment[]
  stationMembers  StationMember[]
  payRateHistory  PayRateHistory[]
}

model WorkCenter {
  id            String         @id @default(cuid())
  name          String         @unique
  departmentId  String
  isActive      Boolean        @default(true)
  routingStages RoutingStage[]
  stations      Station[]
  department    Department     @relation(fields: [departmentId], references: [id])
}

model Station {
  id                     String              @id @default(cuid())
  code                   String              @unique
  name                   String
  description            String?
  workCenterId           String
  defaultPayRate         Decimal?            @db.Decimal(10, 2)
  capacity               Int?
  targetCycleTimeSeconds Int?
  isActive               Boolean             @default(true)
  workCenter             WorkCenter          @relation(fields: [workCenterId], references: [id])
  woStageLogs            WOStageLog[]
  members                StationMember[]
  equipment              StationEquipment[]
  metrics                StationMetrics[]
}

model RoutingVersion {
  id           String               @id @default(cuid())
  model        String
  trim         String?
  featuresJson Json?
  version      Int                  @default(1)
  status       RoutingVersionStatus @default(DRAFT)
  releasedAt   DateTime?
  stages       RoutingStage[]
  workOrders   WorkOrder[]
}

model RoutingStage {
  id                      String                   @id @default(cuid())
  routingVersionId        String
  sequence                Int
  code                    String
  name                    String
  enabled                 Boolean                  @default(true)
  workCenterId            String
  standardStageSeconds    Int
  routingVersion          RoutingVersion           @relation(fields: [routingVersionId], references: [id])
  workCenter              WorkCenter               @relation(fields: [workCenterId], references: [id])
  woStageLogs             WOStageLog[]
  workInstructionVersions WorkInstructionVersion[]
}

model WorkOrder {
  id                String                @id @default(cuid())
  number            String                @unique
  hullId            String
  productSku        String
  specSnapshot      Json
  qty               Int
  status            WOStatus              @default(RELEASED)
  priority          WOPriority            @default(NORMAL)
  plannedStartDate  DateTime?
  plannedFinishDate DateTime?
  routingVersionId  String
  currentStageIndex Int                   @default(0)
  createdAt         DateTime              @default(now())
  woStageLogs       WOStageLog[]
  notes             WorkOrderNote[]
  attachments       WorkOrderAttachment[]
  versions          WorkOrderVersion[]
  routingVersion    RoutingVersion        @relation(fields: [routingVersionId], references: [id])

  @@index([hullId])
  @@index([productSku])
  @@index([status])
  @@index([status, createdAt])
  @@index([routingVersionId])
}

model WorkOrderVersion {
  id             String    @id @default(cuid())
  workOrderId    String
  versionNumber  Int
  snapshotData   Json
  reason         String
  createdBy      String
  createdAt      DateTime  @default(now())
  workOrder      WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
}

model WOStageLog {
  id             String       @id @default(cuid())
  workOrderId    String
  routingStageId String
  stationId      String
  userId         String
  event          WOEvent
  goodQty        Int          @default(0)
  scrapQty       Int          @default(0)
  note           String?
  createdAt      DateTime     @default(now())
  routingStage   RoutingStage @relation(fields: [routingStageId], references: [id])
  station        Station      @relation(fields: [stationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  workOrder      WorkOrder    @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId, createdAt])
}

model WorkInstructionVersion {
  id             String       @id @default(cuid())
  routingStageId String
  version        Int
  contentMd      String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  routingStage   RoutingStage @relation(fields: [routingStageId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  model     String
  modelId   String
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  actor     User?    @relation(fields: [actorId], references: [id])
}

enum Role {
  ADMIN
  SUPERVISOR
  OPERATOR
}

enum WOStatus {
  PLANNED
  RELEASED
  IN_PROGRESS
  HOLD
  COMPLETED
  CLOSED
  CANCELLED
}

enum WOPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum WOEvent {
  START
  PAUSE
  COMPLETE
  SCRAP_ADJUST
  GOOD_ADJUST
}

enum NoteScope {
  GENERAL
  DEPARTMENT
}

enum RoutingVersionStatus {
  DRAFT
  RELEASED
}

// Notes system
model WorkOrderNote {
  id           String      @id @default(cuid())
  workOrderId  String
  userId       String
  departmentId String?
  scope        NoteScope   @default(GENERAL)
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  workOrder    WorkOrder   @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id])
}

// File attachment system
model WorkOrderAttachment {
  id           String    @id @default(cuid())
  workOrderId  String
  userId       String
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  filePath     String
  createdAt    DateTime  @default(now())
  workOrder    WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
}

// Product model and trim system
model ProductModel {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  trims       ProductTrim[]
}

model ProductTrim {
  id             String       @id @default(cuid())
  productModelId String
  name           String
  description    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
}

// Station member assignments
model StationMember {
  id        String   @id @default(cuid())
  stationId String
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  station   Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([stationId, userId])
  @@index([userId])
  @@index([stationId])
}

// Equipment tracking
model Equipment {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  stations    StationEquipment[]
}

// Station-Equipment many-to-many
model StationEquipment {
  id          String    @id @default(cuid())
  stationId   String
  equipmentId String
  createdAt   DateTime  @default(now())
  station     Station   @relation(fields: [stationId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([stationId, equipmentId])
  @@index([equipmentId])
}

// Pay rate history tracking
model PayRateHistory {
  id          String   @id @default(cuid())
  userId      String
  oldRate     Decimal? @db.Decimal(10, 2)
  newRate     Decimal  @db.Decimal(10, 2)
  changedBy   String
  reason      String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

// Cached station metrics (updated monthly)
model StationMetrics {
  id                    String   @id @default(cuid())
  stationId             String
  periodStart           DateTime
  periodEnd             DateTime
  weightedAverageRate   Decimal  @db.Decimal(10, 2)
  totalHoursWorked      Decimal  @db.Decimal(10, 2)
  totalLaborCost        Decimal  @db.Decimal(10, 2)
  uniqueOperatorCount   Int
  calculatedAt          DateTime @default(now())
  station               Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@unique([stationId, periodStart])
  @@index([stationId, periodStart])
}
