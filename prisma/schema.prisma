generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]
  workCenters WorkCenter[]
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  role         Role         @default(OPERATOR)
  departmentId String?
  createdAt    DateTime     @default(now())
  auditLogs    AuditLog[]
  department   Department?  @relation(fields: [departmentId], references: [id])
  woStageLogs  WOStageLog[]
}

model WorkCenter {
  id            String         @id @default(cuid())
  name          String         @unique
  departmentId  String
  isActive      Boolean        @default(true)
  routingStages RoutingStage[]
  stations      Station[]
  department    Department     @relation(fields: [departmentId], references: [id])
}

model Station {
  id           String       @id @default(cuid())
  code         String       @unique
  name         String
  workCenterId String
  isActive     Boolean      @default(true)
  workCenter   WorkCenter   @relation(fields: [workCenterId], references: [id])
  woStageLogs  WOStageLog[]
}

model RoutingVersion {
  id           String               @id @default(cuid())
  model        String
  trim         String?
  featuresJson Json?
  version      Int                  @default(1)
  status       RoutingVersionStatus @default(DRAFT)
  releasedAt   DateTime?
  stages       RoutingStage[]
  workOrders   WorkOrder[]
}

model RoutingStage {
  id                      String                   @id @default(cuid())
  routingVersionId        String
  sequence                Int
  code                    String
  name                    String
  enabled                 Boolean                  @default(true)
  workCenterId            String
  standardStageSeconds    Int
  routingVersion          RoutingVersion           @relation(fields: [routingVersionId], references: [id])
  workCenter              WorkCenter               @relation(fields: [workCenterId], references: [id])
  woStageLogs             WOStageLog[]
  workInstructionVersions WorkInstructionVersion[]
}

model WorkOrder {
  id                String         @id @default(cuid())
  number            String         @unique
  hullId            String
  productSku        String
  specSnapshot      Json
  qty               Int
  status            WOStatus       @default(RELEASED)
  routingVersionId  String
  currentStageIndex Int            @default(0)
  createdAt         DateTime       @default(now())
  woStageLogs       WOStageLog[]
  routingVersion    RoutingVersion @relation(fields: [routingVersionId], references: [id])
}

model WOStageLog {
  id             String       @id @default(cuid())
  workOrderId    String
  routingStageId String
  stationId      String
  userId         String
  event          WOEvent
  goodQty        Int          @default(0)
  scrapQty       Int          @default(0)
  note           String?
  createdAt      DateTime     @default(now())
  routingStage   RoutingStage @relation(fields: [routingStageId], references: [id])
  station        Station      @relation(fields: [stationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  workOrder      WorkOrder    @relation(fields: [workOrderId], references: [id])
}

model WorkInstructionVersion {
  id             String       @id @default(cuid())
  routingStageId String
  version        Int
  contentMd      String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  routingStage   RoutingStage @relation(fields: [routingStageId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  model     String
  modelId   String
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  actor     User?    @relation(fields: [actorId], references: [id])
}

enum Role {
  ADMIN
  SUPERVISOR
  OPERATOR
}

enum WOStatus {
  PLANNED
  RELEASED
  IN_PROGRESS
  HOLD
  COMPLETED
  CLOSED
}

enum WOEvent {
  START
  PAUSE
  COMPLETE
  SCRAP_ADJUST
  GOOD_ADJUST
}

enum RoutingVersionStatus {
  DRAFT
  RELEASED
}
